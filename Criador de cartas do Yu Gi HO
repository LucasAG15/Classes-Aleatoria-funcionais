class CartaYuGiOh:
    ATRIBUTOS_VALIDOS = ['√ÅGUA', 'FOGO', 'LUZ',
                         'TERRA', 'TREVAS', 'VENTO', 'DIVINO']
    TIPOS_VALIDOS = [
        'AQUA', 'BESTA', 'BESTA ALADA', 'BESTA DIVINA', 'BESTA GUERREIRA',
        'CIBERSE', 'DEM√îNIO', 'DEUS CRIADOR', 'DRAG√ÉO', 'FADA', 'GUERREIRO',
        'INSETO', 'MAGO', 'M√ÅQUINA', 'PEIXE', 'PLANTA', 'PS√çQUICO', 'PIRO',
        'ROCHA', 'R√âPTIL', 'SERPENTE MARINHA', 'TROV√ÉO', 'WYRM', 'ZUMBI'
    ]

    def __init__(self, nome, nivel, atributo, tipo, ataque, defesa, efeito=None):
        self.nome = nome
        self.nivel = self._validar_nivel(nivel)
        self.atributo = self._validar_atributo(atributo)
        self.tipo = self._validar_tipo(tipo)
        self.ataque = ataque
        self.defesa = defesa
        self.efeito = efeito

    def _validar_nivel(self, nivel):
        if not isinstance(nivel, int) or nivel < 1 or nivel > 12:
            raise ValueError("N√≠vel deve ser um inteiro entre 1 e 12")
        return nivel

    def _validar_atributo(self, atributo):
        atributo_upper = atributo.upper()
        if atributo_upper not in self.ATRIBUTOS_VALIDOS:
            raise ValueError(
                f"Atributo inv√°lido. Deve ser um dos: {', '.join(self.ATRIBUTOS_VALIDOS)}")
        return atributo_upper

    def _validar_tipo(self, tipo):
        tipo_upper = tipo.upper()
        if tipo_upper not in self.TIPOS_VALIDOS:
            raise ValueError(
                f"Tipo inv√°lido. Deve ser um dos: {', '.join(self.TIPOS_VALIDOS)}")
        return tipo_upper

    def __str__(self):
        estrelas = '‚òÖ' * self.nivel
        info = f"\n=== {self.nome} ===\n"
        info += f"N√≠vel: {estrelas}\n"
        info += f"Atributo: {self.atributo}\n"
        info += f"Tipo: {self.tipo}\n"
        info += f"ATK: {self.ataque} / DEF: {self.defesa}\n"
        if self.efeito:
            info += f"\n[Efeito]\n{self.efeito}\n"
        info += "=" * 30
        return info


def criar_carta_interativamente():
    print("\n" + "="*50)
    print("üÉè CRIADOR DE CARTAS DE YU-GI-OH! üÉè")
    print("="*50 + "\n")

    # Nome da Carta
    nome = input("Digite o nome da carta: ").strip()
    while not nome:
        print("O nome da carta n√£o pode estar vazio!")
        nome = input("Digite o nome da carta: ").strip()

    # N√≠vel da Carta
    while True:
        try:
            nivel = int(input("Digite o n√≠vel da carta (1-12): "))
            if 1 <= nivel <= 12:
                break
            print("O n√≠vel deve ser entre 1 e 12!")
        except ValueError:
            print("Por favor, digite um n√∫mero v√°lido!")

    # Atributo da Carta
    print("\nAtributos dispon√≠veis:")
    for i, atributo in enumerate(CartaYuGiOh.ATRIBUTOS_VALIDOS, 1):
        print(f"{i}. {atributo}")

    while True:
        try:
            escolha = int(input("Escolha o n√∫mero do atributo: "))
            if 1 <= escolha <= len(CartaYuGiOh.ATRIBUTOS_VALIDOS):
                atributo = CartaYuGiOh.ATRIBUTOS_VALIDOS[escolha-1]
                break
            print("Escolha inv√°lida!")
        except ValueError:
            print("Por favor, digite um n√∫mero v√°lido!")

    # Tipo da Carta
    print("\nTipos dispon√≠veis:")
    for i, tipo in enumerate(CartaYuGiOh.TIPOS_VALIDOS, 1):
        print(f"{i}. {tipo}")

    while True:
        try:
            escolha = int(input("Escolha o n√∫mero do tipo: "))
            if 1 <= escolha <= len(CartaYuGiOh.TIPOS_VALIDOS):
                tipo = CartaYuGiOh.TIPOS_VALIDOS[escolha-1]
                break
            print("Escolha inv√°lida!")
        except ValueError:
            print("Por favor, digite um n√∫mero v√°lido!")

    # Pontos de Ataque e Defesa
    while True:
        try:
            ataque = int(input("Digite os pontos de ataque (ATK): "))
            defesa = int(input("Digite os pontos de defesa (DEF): "))
            break
        except ValueError:
            print("Por favor, digite n√∫meros v√°lidos para ATK e DEF!")

    # Efeito da Carta
    efeito = input(
        "Digite o efeito da carta (ou deixe em branco se n√£o tiver): ").strip()

    # Criar a carta
    try:
        nova_carta = CartaYuGiOh(
            nome=nome,
            nivel=nivel,
            atributo=atributo,
            tipo=tipo,
            ataque=ataque,
            defesa=defesa,
            efeito=efeito if efeito else None
        )
        print("\n" + "="*50)
        print("üéâ CARTA CRIADA COM SUCESSO! üéâ")
        print(nova_carta)
        return nova_carta
    except Exception as e:
        print(f"\n‚ùå Erro ao criar a carta: {e}")
        return None


class CampoBatalha:
    def __init__(self):
        self.cartas = []

    def adicionar_carta(self, carta):
        self.cartas.append(carta)
        print(f"\n{carta.nome} foi adicionada ao campo de batalha!")

    def mostrar_campo(self):
        if not self.cartas:
            print("\nO campo de batalha est√° vazio!")
            return

        print("\n" + "="*50)
        print("üÉè CARTAS NO CAMPO DE BATALHA üÉè")
        print("="*50)
        for i, carta in enumerate(self.cartas, 1):
            print(f"\nCarta {i}:")
            print(carta)

    def remover_carta(self, indice):
        try:
            carta_removida = self.cartas.pop(indice-1)
            print(f"\n{carta_removida.nome} foi removida do campo de batalha!")
        except IndexError:
            print("\n√çndice inv√°lido! Nenhuma carta foi removida.")


def menu_principal():
    campo = CampoBatalha()

    while True:
        print("\n" + "="*50)
        print("MENU PRINCIPAL")
        print("1. Criar nova carta")
        print("2. Ver cartas no campo")
        print("3. Remover carta do campo")
        print("4. Sair")

        escolha = input("Escolha uma op√ß√£o: ")

        if escolha == "1":
            nova_carta = criar_carta_interativamente()
            if nova_carta:
                campo.adicionar_carta(nova_carta)
        elif escolha == "2":
            campo.mostrar_campo()
        elif escolha == "3":
            campo.mostrar_campo()
            if campo.cartas:
                try:
                    indice = int(
                        input("\nDigite o n√∫mero da carta a ser removida: "))
                    campo.remover_carta(indice)
                except ValueError:
                    print("Por favor, digite um n√∫mero v√°lido!")
        elif escolha == "4":
            print("\nObrigado por usar o Criador de Cartas de Yu-Gi-Oh! At√© mais!")
            break
        else:
            print("\nOp√ß√£o inv√°lida! Por favor, escolha entre 1-4.")


if __name__ == "__main__":
    menu_principal()
